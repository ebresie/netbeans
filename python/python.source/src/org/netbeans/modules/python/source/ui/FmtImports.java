/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

package org.netbeans.modules.python.source.ui;

import org.netbeans.modules.options.editor.spi.PreferencesCustomizer;
import static org.netbeans.modules.python.source.ui.FmtOptions.*;
import static org.netbeans.modules.python.source.ui.FmtOptions.CategorySupport.OPTION_ID;

/**
 * Options related to imports
 * 
 */
public class FmtImports extends javax.swing.JPanel {
    
    /** Creates new form FmtImports */
    public FmtImports() {
        initComponents();

        formatImportsCb.putClientProperty(OPTION_ID, formatImports);
        onePerLineCb.putClientProperty(OPTION_ID, oneImportPerLine);
        removeDuplicateCb.putClientProperty(OPTION_ID, removeDuplicates);
        systemLibsCb.putClientProperty(OPTION_ID, systemLibsFirst);
        cleanupCombo.putClientProperty(OPTION_ID, cleanupUnusedImports);
        preferSymbols.putClientProperty(OPTION_ID, preferSymbolImports);
        sortImportsCb.putClientProperty(OPTION_ID, sortImports);
        sepFromImpCb.putClientProperty(OPTION_ID, separateFromImps);
    }
    
    public static PreferencesCustomizer.Factory getController() {
        return new CategorySupport.Factory("imports", FmtImports.class,
                org.openide.util.NbBundle.getMessage(FmtImports.class, "SAMPLE_Imports"));
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        formatImportsCb = new javax.swing.JCheckBox();
        onePerLineCb = new javax.swing.JCheckBox();
        systemLibsCb = new javax.swing.JCheckBox();
        removeDuplicateCb = new javax.swing.JCheckBox();
        cleanupLabel = new javax.swing.JLabel();
        cleanupCombo = new javax.swing.JComboBox();
        preferSymbols = new javax.swing.JCheckBox();
        sortImportsCb = new javax.swing.JCheckBox();
        sepFromImpCb = new javax.swing.JCheckBox();

        setName(org.openide.util.NbBundle.getMessage(FmtImports.class, "LBL_Imports")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(formatImportsCb, org.openide.util.NbBundle.getMessage(FmtImports.class, "FmtImports.formatImportsCb.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(onePerLineCb, org.openide.util.NbBundle.getMessage(FmtImports.class, "FmtImports.onePerLineCb.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(systemLibsCb, org.openide.util.NbBundle.getMessage(FmtImports.class, "FmtImports.systemLibsCb.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(removeDuplicateCb, org.openide.util.NbBundle.getMessage(FmtImports.class, "FmtImports.removeDuplicateCb.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(cleanupLabel, org.openide.util.NbBundle.getMessage(FmtImports.class, "FmtImports.cleanupLabel.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(preferSymbols, org.openide.util.NbBundle.getMessage(FmtImports.class, "FmtImports.preferSymbols.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(sortImportsCb, org.openide.util.NbBundle.getMessage(FmtImports.class, "FmtImports.sortImportsCb.text")); // NOI18N

        org.openide.awt.Mnemonics.setLocalizedText(sepFromImpCb, org.openide.util.NbBundle.getMessage(FmtImports.class, "FmtImports.sepFromImpCb.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(formatImportsCb)
                    .addComponent(onePerLineCb)
                    .addComponent(systemLibsCb)
                    .addComponent(sortImportsCb)
                    .addComponent(sepFromImpCb)
                    .addComponent(removeDuplicateCb)
                    .addComponent(preferSymbols)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cleanupLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cleanupCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(formatImportsCb)
                .addGap(18, 18, 18)
                .addComponent(onePerLineCb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(systemLibsCb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sortImportsCb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sepFromImpCb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeDuplicateCb)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(preferSymbols)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cleanupLabel)
                    .addComponent(cleanupCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cleanupCombo;
    private javax.swing.JLabel cleanupLabel;
    private javax.swing.JCheckBox formatImportsCb;
    private javax.swing.JCheckBox onePerLineCb;
    private javax.swing.JCheckBox preferSymbols;
    private javax.swing.JCheckBox removeDuplicateCb;
    private javax.swing.JCheckBox sepFromImpCb;
    private javax.swing.JCheckBox sortImportsCb;
    private javax.swing.JCheckBox systemLibsCb;
    // End of variables declaration//GEN-END:variables
    
}
