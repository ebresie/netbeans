# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

# Formating options

LBL_TabsAndIndents=Tabs and Indents
LBL_CodeGeneration=Code Generation
LBL_Alignment=Alignment
LBL_Wrapping=Wrapping
LBL_BlankLines=Blank Lines
LBL_Spaces=Spaces
LBL_Imports=Imports

LBL_bp_SAME_LINE=Same Line
LBL_bp_NEW_LINE=New Line
LBL_bp_NEW_LINE_HALF_INDENTED=New Line Half Indented
LBL_bp_NEW_LINE_INDENTED= New Line Indented
    
LBL_bg_GENERATE=Generate
LBL_bg_LEAVE_ALONE=Leave Alone
LBL_bg_ELIMINATE=Eliminate
       
LBL_wrp_WRAP_ALWAYS=Always
LBL_wrp_WRAP_IF_LONG=If Long
LBL_wrp_WRAP_NEVER=Never

LBL_imp_COMMENT_OUT=Comment Out
LBL_imp_LEAVE_ALONE=Leave Alone
LBL_imp_DELETE=Delete

LBL_ExpandTabToSpaces=&Expand Tab to Spaces
LBL_TabSize=&Tab Size:
LBL_IndentSize=&Indentation Size:
LBL_ContinuationIndentSize=&Continuation Indentation Size:
LBL_LabelIndent=&Label Indentation\:
LBL_AbsoluteLabelIndent=&Absolute Label Indentation
LBL_IndentTopLevelClassMemberts=Indent Top Level Class &Members
LBL_AddLeadingStarInComment=Add Leading Star In Comment
LBL_RightMargin=&Right Margin:

LBL_Naming=Naming\:
LBL_PreferLongerNames=Prefer Longer Names
LBL_Prefix=Prefix
LBL_Suffix=Suffix
LBL_Field=Field\:
LBL_StaticField=Static Field\:
LBL_Parameter=Parameter\:
LBL_LocalVariable=Local Variable\:
LBL_Misc=Misc\:
LBL_QualifyFieldAccess=Qualify Field Access
LBL_UseIsForBooleanGetters=Use Is For Boolean Getters
LBL_AddOverrideAnnotation=Add Override Annotation
LBL_FinalMofier=Final Modifier\:
LBL_ParametersFinal=Make Generated Parameters Final
LBL_LocalVariablesFinal=Make Generated Local variables Final
LBL_ImportOredering=Import Ordering\:
LBL_ImportUp=Move Up
LBL_ImportDown=Move Down
LBL_blBeforePackage=Before &Package\:
LBL_blAfterPackage=After P&ackage\:
LBL_blBeforeImports=Before &Imports\:
LBL_blAfterImports=After I&mports\:
LBL_blBeforeClass=Before &Class\:
LBL_blAfterClass=After C&lass\:
LBL_blAfterClassHeader=After Class &Header\:
LBL_blBeforeFields=Before &Field\:
LBL_blAfterFields=After Fi&eld\:
LBL_blBeforeMethods=Before &Method\:
LBL_blAfterMethods=After Me&thod\:

LBL_BeforeKeywords=Before Keywords
LBL_spaceBeforeWhile="while"
LBL_spaceBeforeElse="else"
LBL_spaceBeforeCatch="catch"
LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Before Parentheses
LBL_spaceBeforeMethodDeclParen=Method Declaration
LBL_spaceBeforeMethodCallParen=Method Call
LBL_spaceBeforeIfParen="if"
LBL_spaceBeforeForParen="for"
LBL_spaceBeforeWhileParen="while"
LBL_spaceBeforeCatchParen="catch"
LBL_spaceBeforeSwitchParen="switch"
LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Annotation Parameters

LBL_AroundOperators=Around Operators
LBL_spaceAroundUnaryOps=Unary Operators
LBL_spaceAroundBinaryOps=Binary Operators
LBL_spaceAroundTernaryOps=Ternary Operators
LBL_spaceAroundAssignOps=Assignment Operators

LBL_BeforeLeftBraces=Before Left Braces
LBL_spaceBeforeClassDeclLeftBrace=Class Declaration
LBL_spaceBeforeMethodDeclLeftBrace=Method Declaration
LBL_spaceBeforeIfLeftBrace="if"
LBL_spaceBeforeElseLeftBrace="else"
LBL_spaceBeforeWhileLeftBrace="while"
LBL_spaceBeforeForLeftBrace="for"
LBL_spaceBeforeDoLeftBrace="do"
LBL_spaceBeforeSwitchLeftBrace="switch"
LBL_spaceBeforeTryLeftBrace="try"
LBL_spaceBeforeCatchLeftBrace="catch"
LBL_spaceBeforeFinallyLeftBrace="finally"
LBL_spaceBeforeSynchronizedLeftBrace="synchronized"
LBL_spaceBeforeStaticInitLeftBrace=Static Initializer
LBL_spaceBeforeArrayInitLeftBrace=Array Initializer

LBL_WithinParentheses=Within Parentheses
LBL_spaceWithinParens=Parentheses
LBL_spaceWithinMethodDeclParens=Method Declaration
LBL_spaceWithinMethodCallParens=Method Call
LBL_spaceWithinIfParens="if"
LBL_spaceWithinForParens="for"
LBL_spaceWithinWhileParens="while"
LBL_spaceWithinSwitchParens="switch"
LBL_spaceWithinCatchParens="catch"
LBL_spaceWithinSynchronizedParens="synchronized"
LBL_spaceWithinTypeCastParens=Type Cast
LBL_spaceWithinAnnotationParens=Annotation
LBL_spaceWithinBraces=Braces
LBL_spaceWithinArrayInitBrackets=Array Initializer Brackets

LBL_Other=Other
LBL_spaceBeforeComma=Before Comma
LBL_spaceAfterComma=After Comma
LBL_spaceBeforeSemi=Before Semicolon
LBL_spaceAfterSemi=After Semicolon
LBL_spaceBeforeColon=Before Colon
LBL_spaceAfterColon=After Colon
LBL_spaceAfterTypeCast=After Type Cast
LBL_wrp_extendsImplementsKeyword=&Extends/Implements Keyword\: 
LBL_wrp_extendsImplementsList=E&xtends/Implements List\:
LBL_wrp_methodParameters=Method &Parameters\:
LBL_wrp_throwsKeyword=&Throws Keyword\:
LBL_wrp_throwsList=Th&rows List\:
LBL_wrp_methodCallArgs=Method Call &Arguments\:
LBL_wrp_annotationArgs=Annotation Arg&uments\:
LBL_wrp_chainedMethodCalls=C&hained Method Calls\:
LBL_wrp_arrayInit=Array Initiali&zer\:
LBL_wrp_for=&For\:
LBL_wrp_forStatement=F&or Statement\:
LBL_wrp_ifStatement=&If Statement\:
LBL_wrp_whileStatement=&While Statement\:
LBL_wrp_doWhileStatement=&Do ... While Statement
LBL_wrp_assert=&Assert\:
LBL_wrp_enumConstants=Enum &Constants\:
LBL_wrp_annotations=A&nnotations\:
LBL_wrp_binaryOps=&Binary Operators\:
LBL_wrp_ternaryOps=Ternar&y Operators\:
LBL_wrp_assignOps=Assi&gnment Operators\:

LBL_br_bracesPlacement=Braces Placement
LBL_br_bracesGeneration=Braces Generation
LBL_al_newLines=New Lines
LBL_al_multilineAlignment=Multiline Alignment
LBL_nl_Else="&else"
LBL_nl_While="w&hile"
LBL_nl_Catch="c&atch"
LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=after modifie&rs
LBL_am_MethodParams=Method &Parameters
LBL_am_CallArgs=Method Call Arg&uments
LBL_am_AnnotationArgs=&Annotation Arguments
LBL_an_Implements=I&mplements List
LBL_am_Throws=&Throws List
LBL_am_Paren=Parenthesize&d
LBL_am_BinaryOp=&Binary Operators
LBL_am_TernaryOp=Ter&nary Operators
LBL_am_Assign=Assi&gnment
LBL_am_For=&For
LBL_am_ArrayInit=Array Initiali&zer

LBL_IndentCasesFromSwitch=Indent Case Statements In &Switch

# Following entries (marked) as samples are used as examples in the formating
# options. It is highly discourage to localize them unless absolutely necessary.

SAMPLE_Default=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC
SAMPLE_TabsIndents=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {
SAMPLE_AlignBraces=@Anno(paramA="a Value", paramB="bValue")\n
SAMPLE_Wrapping=@Anno(paramA="a Value", paramB="bValue")
SAMPLE_BlankLines=package org.netbeans.samples;

SAMPLE_Imports=\
# Copyright 2008\n\
"""My Module"""\n\
\n\
import sys\n\
import wsgiref.handlers\n\
from google.appengine.ext.webapp.util import run_wsgi_app\n\
from google.appengine.ext import webapp\n\
from google.appengine.ext import db\n\
import os\n\
\n\
\n\
from google.appengine.api import users\n\
import google.appengine.api.test\n\
from google.appengine.api import users\n\
\n\
from google.appengine.api import users\n\
from google.appengine.api import users\n\
import string\n\
from google.appengine.ext.webapp import template as FooBar\n\
from google.appengine.ext.webapp.util import login_required\n\
import random\n\
import datetime\n

#\n\
#new_str = swapcase("foo")


# Newlines on the following line since space prefixes are ignored by the .properties loader
SAMPLE_Spaces=\
def func( arg1 ,arg2 ,\
\n  arg3 = 3,  arg  =  4):\
\n\
\n  if pos!=-1 and optval[ pos-1 ].isspace():\
\n      x=5+2\
\n\
\nmodeDict = { 'r':'rb','w':'wb', \\\
\n   'a' : 'r+b' }\
\nx = 2; y=3 ; z    =      5\n


nlFinallyCheckBox1.text="finall&y"


AN_Preview=Preview
AD_Preview=Preview
FmtImports.formatImportsCb.text=Organize Imports during formatting
FmtImports.removeDuplicateCb.text=Remove Duplicate Imports
FmtImports.systemLibsCb.text=Separate out system libraries
FmtImports.onePerLineCb.text=Prefer one import per line
FmtImports.cleanupLabel.text=Unused imports:
FmtImports.preferSymbols.text=Prefer symbol imports
FmtImports.sortImportsCb.text=Sort Alphabetically
FmtSpaces.addAroundOp.text=Add spaces around operators
FmtSpaces.removeInParam.text=But remove in parameter assignments
FmtSpaces.removeInParen.text=Remove spaces inside ( ), { }, and [ ]
FmtSpaces.addAfterComma.text=Add spaces after commas
FmtSpaces.removeBeforeSep.text=Remove spaces before separators ( : , ; )
FmtSpaces.collapseSpacesCb.text=Collapse multiple spaces
FmtImports.sepFromImpCb.text=Separate "from" and "import" statements
